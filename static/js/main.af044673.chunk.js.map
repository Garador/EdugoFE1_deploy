{"version":3,"sources":["types/notification.ts","components/pages/index/addTodo/index.tsx","types/todo.ts","components/pages/index/editTodo/index.tsx","components/pages/index/fullViewTodo/index.tsx","components/pages/index/multipleEdition/index.tsx","components/pages/index/index.container.tsx","stores/TodoStore/Todo.store.ts","providers/Todo/Todo.provider.ts","rservice/MockDataService.tsx","stores/Notification/Notification.store.ts","providers/Notification/Notification.provider.ts","components/shared/Notifications/index.tsx","components/pages/index/index.tsx","index.tsx"],"names":["ENotificationType","AddTodoComponent","observer","props","state","formData","title","description","finished","first_sighting_at","provider","providerInstance","cancelRowAdd","bind","startAddingNewRow","addNewTodo","updateFormData","this","setIsAddingNewRow","ev","preventDefault","makeTodo","target","name","value","setState","Container","Button","color","variant","onClick","Modal","open","isAddingTodo","onClose","aria-labelledby","aria-describedby","className","component","maxWidth","CssBaseline","Avatar","LabelOutlined","Typography","noValidate","onSubmit","TextField","margin","required","fullWidth","id","label","autoFocus","onInput","type","multiline","rows","InputProps","inputProps","min","getInputDate","moment","toDate","max","Date","React","Component","ESelAction","EditTodoComponent","notfProvider","finishRowEdit","updateTodo","notificationProvider","editingTodo","setData","setEditingTodo","addNotification","SUCCESS","isEditingTodo","FullViewTodoComponent","finishRowFullDisplayView","fullView","setFullViewTodo","paragraph","displayFS","MultipleEdition","todoProvider","removeElements","checkElements","Object","keys","selected","length","deleteSeveralTodos","onActionPerformed","DELETED","e","checkSeveralTodos","CHECKED","todos","filter","element","indexOf","hasElements","areAllFinished","areAllInfunished","IndexPageContainer","inject","elements","TODO_PROVIDER","NOTF_PROVIDER","handleLimitResults","deleteTodo","selectMultiple","handleSelectionAction","todoId","gutterBottom","isTodoInFullView","Table","TableHead","TableRow","TableCell","TableBody","slice","map","todo","key","Checkbox","checked","onChange","checkTodo","DeleteOutlined","EditOutlined","Pageview","TableFooter","colSpan","Select","labelId","MenuItem","TodoObservable","Math","floor","random","toString","format","observable","computed","TodoStoreInstance","TodoProvider","store","editing","parseInputDate","newTodo","push","find","Error","todoIds","forEach","isAdding","addingNewRow","axios","get","data","newTodos","todoObservable","tagged","dateValue","action","MockDataService","loadedMocks","error","loading","loadMockTodos","then","INFO","catch","ERROR","children","errorScreen","loadingScreen","Notification","NotificationStoreInstance","NotificationProvider","durationMillis","notification","isShowing","shownAt","notifications","setTimeout","notificationID","Alert","elevation","NotificationsComponent","handleClose","notificationId","hideNotification","notificationType","WARNING","shownNotifications","Snackbar","severity","getSeverity","IndexPage","ReactDOM","render","path","document","getElementById"],"mappings":"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","file":"static/js/main.af044673.chunk.js","sourcesContent":["/**\n * Used to specify the type of notification shown.\n */\nexport enum ENotificationType {\n    ERROR = 1,\n    WARNING = 2,\n    INFO = 3,\n    SUCCESS = 4\n}","import { Avatar, Button, Container, CssBaseline, Modal, TextField, Typography } from '@material-ui/core';\nimport { observer } from 'mobx-react';\nimport React, { SyntheticEvent } from 'react';\nimport { TodoProvider } from '../../../../providers/Todo/Todo.provider';\nimport \"./styles/style.scss\";\nimport { LabelOutlined } from '@material-ui/icons';\nimport { ITodoEditForm } from '../../../../types/todo';\nimport moment from 'moment';\nimport \"./styles/index.scss\";\n\n@observer\nexport class AddTodoComponent extends React.Component<{ providerInstance: TodoProvider }> {\n\n    state: { formData: ITodoEditForm } = {\n        formData: {\n            title: \"\",\n            description: \"\",\n            finished: false,\n            first_sighting_at: \"\"\n        }\n    }\n    provider: TodoProvider;\n\n    constructor(props: any) {\n        super(props);\n        this.provider = this.props.providerInstance;\n        this.cancelRowAdd = this.cancelRowAdd.bind(this);\n        this.startAddingNewRow = this.startAddingNewRow.bind(this);\n        this.addNewTodo = this.addNewTodo.bind(this);\n        this.updateFormData = this.updateFormData.bind(this);\n    }\n\n    /**\n     * Cancels a row addition\n     */\n    cancelRowAdd() {\n        this.provider.setIsAddingNewRow(false);\n    }\n\n    /**\n     * Adds a new row\n     */\n    startAddingNewRow() {\n        this.provider.setIsAddingNewRow(true)\n    }\n\n    /**\n     * Adds a new todo\n     */\n    addNewTodo(ev: SyntheticEvent) {\n        ev.preventDefault();\n        this.provider.makeTodo(this.state.formData);\n        this.cancelRowAdd();\n    }\n\n    /**\n     * Updates the form data\n     */\n    updateFormData(ev:any){\n        let {name, value} = ev.target;\n        this.setState((state:any) => {\n            state.formData[name] = value;\n            return state;\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Container>\n                    <Button color=\"primary\" variant=\"contained\" onClick={this.startAddingNewRow}>Add New Row</Button>\n                </Container>\n                <Modal\n                    open={this.provider.isAddingTodo}\n                    onClose={this.cancelRowAdd}\n                    aria-labelledby=\"simple-modal-title\"\n                    aria-describedby=\"simple-modal-description\"\n                    className=\"style-container\"\n                >\n                    <Container component=\"main\" maxWidth=\"xs\">\n                        <CssBaseline />\n                        <div className=\"base-container\">\n                            <Avatar className=\"avatar\">\n                                <LabelOutlined />\n                            </Avatar>\n                            <Typography component=\"h1\" variant=\"h5\">\n                                Add New Animal Record\n                            </Typography>\n                            <form noValidate onSubmit={this.addNewTodo}>\n                                <TextField\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    required\n                                    fullWidth\n                                    id=\"title\"\n                                    label=\"Todo Title\"\n                                    name=\"title\"\n                                    autoFocus\n                                    onInput={this.updateFormData}\n                                    value={this.state.formData.title}\n                                />\n                                <TextField\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    required\n                                    fullWidth\n                                    name=\"description\"\n                                    label=\"Todo Description\"\n                                    type=\"text\"\n                                    id=\"description\"\n                                    multiline\n                                    rows={4}\n                                    onInput={this.updateFormData}\n                                    value={this.state.formData.description}\n                                />\n                                <Typography>\n                                    First Sighting At\n                                </Typography>\n                                <TextField\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    required\n                                    fullWidth\n                                    name=\"first_sighting_at\"\n                                    type=\"date\"\n                                    id=\"first_sighting_at\"\n                                    onInput={this.updateFormData}\n                                    value={this.state.formData.first_sighting_at}\n                                    InputProps={{inputProps: { min: this.provider.getInputDate(moment(\"1900\").toDate()), max: this.provider.getInputDate(new Date())} }}\n                                />\n                                <Button\n                                    type=\"submit\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    className=\"add\"\n                                >\n                                    Add New Todo\n                                </Button>\n                                <Button\n                                    type=\"submit\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    className=\"cancel\"\n                                    onClick={this.cancelRowAdd}\n                                >\n                                    Cancel\n                                </Button>\n                            </form>\n                        </div>\n                    </Container>\n                </Modal>\n            </div>)\n    }\n}","/**\n * This is the payload for the form editing.\n */\nexport interface ITodoEditForm {\n    title: string,\n    description: string,\n    finished: boolean,\n    first_sighting_at: string | Date\n}\n\n/**\n * This specifies the import format for the todos.\n */\nexport interface ITodoImportElement {\n    id: number,\n    name: string,\n    description: string,\n    first_sighting_at: string, //mm/dd/yyyy\n    tagged: boolean\n}\n\n/**\n * This specifies the action for the multiple selection component.\n */\nexport enum ESelAction {\n    DELETED,\n    CHECKED\n}","import { Avatar, Button, Container, CssBaseline, Modal, TextField, Typography } from '@material-ui/core';\nimport { observer } from 'mobx-react';\nimport React, { SyntheticEvent } from 'react';\nimport { TodoProvider } from '../../../../providers/Todo/Todo.provider';\nimport \"./styles/style.scss\";\nimport { LabelOutlined } from '@material-ui/icons';\nimport { ITodoEditForm } from '../../../../types/todo';\nimport moment from 'moment';\nimport { NotificationProvider } from '../../../../providers/Notification/Notification.provider';\nimport { ENotificationType } from '../../../../types/notification';\nimport \"./styles/index.scss\";\n\n@observer\nexport class EditTodoComponent extends React.Component<{ providerInstance: TodoProvider, notificationProvider: NotificationProvider }> {\n\n    state: { formData: ITodoEditForm } = {\n        formData: {\n            title: \"\",\n            description: \"\",\n            finished: false,\n            first_sighting_at: \"\"\n        }\n    }\n    provider: TodoProvider;\n    notfProvider: NotificationProvider;\n\n    constructor(props: any) {\n        super(props);\n        this.finishRowEdit = this.finishRowEdit.bind(this);\n        this.updateTodo = this.updateTodo.bind(this);\n        this.updateFormData = this.updateFormData.bind(this);\n        this.provider = this.props.providerInstance;\n        this.notfProvider = this.props.notificationProvider;\n    }\n\n    setData(){\n        if(!this.provider.editingTodo){\n            return;\n        }\n        let formData:ITodoEditForm = {\n            title: this.provider.editingTodo.title,\n            description: this.provider.editingTodo.description,\n            finished: this.provider.editingTodo.finished,\n            first_sighting_at: this.provider.getInputDate(this.provider.editingTodo.first_sighting_at)\n        };\n        this.setState({\n            formData\n        });\n    }\n\n    componentDidMount(){\n        this.setData();\n    }\n\n    finishRowEdit() {\n        if(this.props.providerInstance.editingTodo){\n            let id:any = this.props.providerInstance.editingTodo.id;\n            this.props.providerInstance.setEditingTodo(id, false);\n        }\n        \n    }\n\n    updateTodo(ev: SyntheticEvent) {\n        ev.preventDefault();\n        if(this.props.providerInstance.editingTodo){\n            let id:any = this.props.providerInstance.editingTodo.id;\n            this.props.providerInstance.updateTodo(id, this.state.formData);\n            this.finishRowEdit();\n            this.notfProvider.addNotification(\"Updated Record\", \"The record selected has been updated\", ENotificationType.SUCCESS);\n        }\n    }\n\n    updateFormData(ev:any){\n        const {name, value} = ev.target;\n        this.setState((state:any) => {\n            state.formData[name] = value;\n            return state;\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Modal\n                    open={this.props.providerInstance.isEditingTodo}\n                    onClose={()=>{this.finishRowEdit()}}\n                    aria-labelledby=\"simple-modal-title\"\n                    aria-describedby=\"simple-modal-description\"\n                    className=\"style-container\"\n                >\n                    <Container component=\"main\" maxWidth=\"xs\">\n                        <CssBaseline />\n                        <div className=\"base-container\">\n                            <Avatar className=\"avatar\">\n                                <LabelOutlined />\n                            </Avatar>\n                            <Typography component=\"h1\" variant=\"h5\">\n                                Editing your todo\n                            </Typography>\n                            <form noValidate\n                                onSubmit={this.updateTodo}>\n                                <TextField\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    required\n                                    fullWidth\n                                    id=\"title\"\n                                    label=\"Todo Title\"\n                                    name=\"title\"\n                                    autoFocus\n                                    onInput={this.updateFormData}\n                                    value={this.state.formData.title}\n                                />\n                                <TextField\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    required\n                                    fullWidth\n                                    name=\"description\"\n                                    label=\"Todo Description\"\n                                    type=\"text\"\n                                    id=\"description\"\n                                    multiline\n                                    rows={4}\n                                    onInput={this.updateFormData}\n                                    value={this.state.formData.description}\n                                />\n                                <Typography>\n                                    First Sighting At\n                                </Typography>\n                                <TextField\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    required\n                                    fullWidth\n                                    name=\"first_sighting_at\"\n                                    type=\"date\"\n                                    id=\"first_sighting_at\"\n                                    onInput={this.updateFormData}\n                                    value={this.state.formData.first_sighting_at}\n                                    InputProps={{inputProps: { min: this.provider.getInputDate(moment(\"1900\").toDate()), max: this.provider.getInputDate(new Date())} }}\n                                />\n                                <Button\n                                    type=\"submit\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    className=\"add\"\n                                    onClick={this.updateTodo}\n                                >\n                                    Update Record\n                                </Button>\n                                <Button\n                                    type=\"submit\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    className=\"cancel\"\n                                    onClick={()=>{this.finishRowEdit()}}\n                                >\n                                    Cancel\n                                </Button>\n                            </form>\n                        </div>\n                    </Container>\n                </Modal>\n            </div>)\n    }\n}","import { Avatar, Button, Container, CssBaseline, Modal, TextField, Typography } from '@material-ui/core';\nimport { observer } from 'mobx-react';\nimport React from 'react';\nimport { TodoProvider } from '../../../../providers/Todo/Todo.provider';\nimport { LabelOutlined } from '@material-ui/icons';\nimport { ITodoEditForm } from '../../../../types/todo';\nimport \"./styles/index.scss\";\nimport \"./styles/style.scss\";\n\n/**\n * Handles the full view for the components.\n */\n@observer\nexport class FullViewTodoComponent extends React.Component<{ providerInstance: TodoProvider }> {\n\n    state: { formData: ITodoEditForm } = {\n        formData: {\n            title: \"\",\n            description: \"\",\n            finished: false,\n            first_sighting_at: \"\"\n        }\n    }\n    provider: TodoProvider;\n\n    constructor(props: any) {\n        super(props);\n        this.finishRowFullDisplayView = this.finishRowFullDisplayView.bind(this);\n        this.provider = this.props.providerInstance;\n    }\n\n    /**\n     * Finished the full display\n     */\n    finishRowFullDisplayView() {\n        if(this.provider.fullView){\n            let id:any = this.provider.fullView.id;\n            this.provider.setFullViewTodo(id, false);\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Modal\n                    open={!!this.provider.fullView}\n                    onClose={()=>{this.finishRowFullDisplayView()}}\n                    aria-labelledby=\"simple-modal-title\"\n                    aria-describedby=\"simple-modal-description\"\n                    className=\"style-container\"\n                >\n                    <Container component=\"main\" maxWidth=\"xs\">\n                        <CssBaseline />\n                        <div className=\"base-div\">\n                            <Avatar className=\"avatar\">\n                                <LabelOutlined />\n                            </Avatar>\n                            <Typography component=\"h1\" variant=\"h5\">\n                                Displaying Record\n                            </Typography>\n                            <Typography variant=\"h3\">\n                                {this.provider.fullView?.title}\n                            </Typography>\n                            <Typography paragraph>\n                                {this.provider.fullView?.description}\n                            </Typography>\n                            <Typography paragraph>\n                                First sighting at: &nbsp;\n                                {this.provider.fullView?.displayFS}\n                            </Typography>\n                            <Typography paragraph>\n                                Is tagged?\n                                {this.provider.fullView?.finished ? \" YES\" : \" NO\"}\n                            </Typography>\n                            <Button\n                                type=\"submit\"\n                                fullWidth\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={this.finishRowFullDisplayView}\n                                className=\"close\"\n                            >\n                                Close\n                            </Button>\n                        </div>\n                    </Container>\n                </Modal>\n            </div>)\n    }\n}","import { Button, Container } from '@material-ui/core';\nimport React from 'react';\nimport { NotificationProvider } from '../../../../providers/Notification/Notification.provider';\nimport { TodoProvider } from '../../../../providers/Todo/Todo.provider';\nimport { ENotificationType } from '../../../../types/notification';\nimport {ESelAction} from '../../../../types/todo'\nimport \"./styles/index.scss\";\n\ninterface IComponentProps {\n    selected: {\n        [index: string]: boolean\n    },\n    todoProvider: TodoProvider,\n    notificationProvider: NotificationProvider,\n    onActionPerformed: (action: ESelAction) => void\n};\n\n/**\n * Handles the multiple edition functionality.\n */\nexport class MultipleEdition extends React.Component<IComponentProps> {\n\n    todoProvider: TodoProvider;\n    notificationProvider: NotificationProvider;\n\n    constructor(props: IComponentProps) {\n        super(props);\n        this.todoProvider = props.todoProvider;\n        this.notificationProvider = props.notificationProvider;\n        this.removeElements = this.removeElements.bind(this);\n        this.checkElements = this.checkElements.bind(this);\n    }\n\n\n    /**\n     * Gets wheter it has or not elements\n     */\n    hasElements() {\n        return Object.keys(this.props.selected || {}).length > 0\n    }\n\n    /**\n     * Removes the selected elements\n     */\n    removeElements() {\n        try{\n            let keys = Object.keys(this.props.selected);\n            this.todoProvider.deleteSeveralTodos(keys);\n            this.notificationProvider.addNotification(\"Removed Elements\", \"Elements have been removed\", ENotificationType.SUCCESS);\n            this.props.onActionPerformed(ESelAction.DELETED);\n        }catch(e){\n            this.notificationProvider.addNotification(\"Error\", \"Error removing elements\", ENotificationType.SUCCESS);\n        }\n    }\n\n    /**\n     * Mark elements as its opposite.\n     */\n    checkElements(){\n        try{\n            let keys = Object.keys(this.props.selected);\n            this.todoProvider.checkSeveralTodos(keys);\n            this.notificationProvider.addNotification(\"Elements Updated\", \"The selected records have been updated.\", ENotificationType.SUCCESS);\n            this.props.onActionPerformed(ESelAction.CHECKED);\n        }catch(e){\n            this.notificationProvider.addNotification(\"Error\", \"Error removing Elements\", ENotificationType.SUCCESS);\n        }\n    }\n\n    /**\n     * Checks wheter all the elements are finished.\n     */\n    areAllFinished(){\n        let keys = Object.keys(this.props.selected);\n        return this.todoProvider.todos.filter(element => {\n            return (keys.indexOf(element.id) > -1 && element.finished)\n        }).length === keys.length;\n    }\n\n    /**\n     * Checks if all the elements are finished.\n     */\n    areAllInfunished(){\n        let keys = Object.keys(this.props.selected);\n        return this.todoProvider.todos.filter(element => {\n            return (keys.indexOf(element.id) > -1 && !element.finished)\n        }).length === keys.length;\n    }\n\n    render() {\n        return (\n            <div>\n                {\n                    this.hasElements() ? <Container className=\"multiple-selection-container\">\n                        <Button onClick={this.removeElements} color=\"secondary\" variant=\"contained\">\n                            Remove\n                        </Button>\n                        {\n                            this.areAllFinished() ?\n                            <Button onClick={this.checkElements} color=\"secondary\" variant=\"contained\">\n                                Untag All\n                            </Button> : <> </>\n                        }\n                        {\n                            this.areAllInfunished() ?\n                            <Button onClick={this.checkElements} color=\"secondary\" variant=\"contained\">\n                                Tag All\n                            </Button> : <> </>\n                        }\n                    </Container> : <></>\n                }\n            </div>\n        )\n    }\n}","import { inject, observer } from 'mobx-react';\nimport React, { SyntheticEvent } from 'react';\nimport { Button, Checkbox, Container, MenuItem, Select, Table, TableBody, TableCell, TableFooter, TableHead, TableRow, Typography } from '@material-ui/core'\nimport { TodoProvider } from '../../../providers/Todo/Todo.provider';\nimport { AddTodoComponent } from './addTodo';\nimport { TodoObservable } from '../../../stores/TodoStore/Todo.store';\nimport { Pageview, DeleteOutlined, EditOutlined } from '@material-ui/icons'\nimport { EditTodoComponent } from './editTodo';\nimport { FullViewTodoComponent } from './fullViewTodo';\nimport { NotificationProvider } from '../../../providers/Notification/Notification.provider';\nimport { ENotificationType } from '../../../types/notification';\nimport { MultipleEdition } from './multipleEdition';\nimport { ESelAction } from '../../../types/todo';\nimport \"./styles/index.container.scss\";\n\n/**\n * Handles the container and the injection of the different elements\n * for the main page.\n */\n@inject(\"TODO_PROVIDER\", \"NOTF_PROVIDER\")\n@observer\nexport class IndexPageContainer extends React.Component<any> {\n    provider: TodoProvider;\n    notfProvider: NotificationProvider;\n    state = {\n        elements: 5,\n        selected: {}\n    }\n\n    constructor(props: any) {\n        super(props);\n        this.provider = this.props.TODO_PROVIDER;\n        this.notfProvider = this.props.NOTF_PROVIDER;\n        this.handleLimitResults = this.handleLimitResults.bind(this);\n        this.deleteTodo = this.deleteTodo.bind(this);\n        this.selectMultiple = this.selectMultiple.bind(this);\n        this.handleSelectionAction = this.handleSelectionAction.bind(this);\n    }\n\n    /**\n     * Handles the event of selecting a new result limit\n     */\n    handleLimitResults(ev: any){\n        this.setState({\n            elements: ev.target.value\n        })\n    }\n\n    /**\n     * Selects / Deselects the todo on the list\n     * @param todoId The ID for the todo\n     */\n    selectMultiple(todoId: string){\n        const {selected} = this.state;\n        if(selected[todoId]){\n            delete selected[todoId];\n        }else{\n            selected[todoId] = true;\n        }\n        this.setState({selected});\n    }\n\n    /**\n     * Handles the selection for the element.\n     * @param element The selected element\n     */\n    handleSelectionAction(element: ESelAction){\n        this.setState({selected: {}});\n    }\n\n    /**\n     * Removes the selected todo.\n     * @param id The todo to be deleted\n     */\n    deleteTodo(id:string){\n        this.provider.deleteTodo(id);\n        this.notfProvider.addNotification(\"Element removed successfully.\", \"Element removed successfully.\", ENotificationType.SUCCESS);\n    }\n\n    render() {\n        return (\n            <Container>\n                <Typography variant=\"h3\" gutterBottom>List of animals to tag</Typography>\n                <Container>\n                    <AddTodoComponent providerInstance={this.provider}/>\n                    {\n                        this.provider.isEditingTodo ?\n                            <EditTodoComponent providerInstance={this.provider} notificationProvider={this.notfProvider} />\n                            : <></>\n                    }\n                    {\n                        this.provider.isTodoInFullView ?\n                            <FullViewTodoComponent providerInstance={this.provider} />\n                            : <></>\n                    }\n                    {\n                        <MultipleEdition onActionPerformed={this.handleSelectionAction} selected={this.state.selected} todoProvider={this.provider} notificationProvider={this.notfProvider}/>\n                    }\n                </Container>\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell></TableCell>\n                            <TableCell>\n                                First Sighting\n                            </TableCell>\n                            <TableCell>\n                                Tagged?\n                            </TableCell>\n                            <TableCell>\n                                Animal Name\n                            </TableCell>\n                            <TableCell>\n                                Actions\n                            </TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {\n                            this.provider.todos.slice(0, this.state.elements)\n                            .map((todo: TodoObservable) => (\n                                <TableRow key={todo.id}>\n                                    <TableCell>\n                                        <Checkbox\n                                            checked={this.state.selected[todo.id] || false}\n                                            onChange={() => this.selectMultiple(todo.id)}\n                                        /></TableCell>\n                                    <TableCell>\n                                        {todo.displayFS}\n                                    </TableCell>\n                                    <TableCell>\n                                        <Checkbox\n                                            checked={todo.finished}\n                                            onChange={() => this.provider.checkTodo(todo.id)}\n                                        />\n                                    </TableCell>\n                                    <TableCell>\n                                        {todo.title}\n                                    </TableCell>\n                                    <TableCell>\n                                        <DeleteOutlined\n                                            className=\"action-icon\"\n                                            onClick={() => { this.deleteTodo(todo.id) }} />\n                                        <EditOutlined\n                                            className=\"action-icon\"\n                                            onClick={() => { this.provider.setEditingTodo(todo.id, true) }}\n                                        />\n                                        <Pageview\n                                            className=\"action-icon\"\n                                            onClick={() => { this.provider.setFullViewTodo(todo.id, true) }}\n                                        />\n                                    </TableCell>\n                                </TableRow>\n                            ))\n                        }\n                    </TableBody>\n                    <TableFooter>\n                        <TableRow>\n                            <TableCell colSpan={2}>\n                                <Select\n                                    labelId=\"results-ammount\"\n                                    id=\"select-results-ammount\"\n                                    value={this.state.elements}\n                                    onChange={this.handleLimitResults}\n                                >\n                                    <MenuItem value={5}>5</MenuItem>\n                                    <MenuItem value={10}>10</MenuItem>\n                                    <MenuItem value={25}>25</MenuItem>\n                                    <MenuItem value={300}>200+</MenuItem>\n                                </Select>\n                            </TableCell>\n                        </TableRow>\n                    </TableFooter>\n                </Table>\n            </Container>\n        )\n    }\n\n}","import { computed, observable } from \"mobx\";\nimport moment from 'moment';\n/**\n * Handles the Todo object.\n */\nexport class TodoObservable {\n    @observable\n    title: string = \"\";\n    @observable\n    finished: boolean = false;\n    @observable\n    description: string = \"\";\n    /**\n     * This field is not meant to change, and thus, not be an observable.\n     */\n    id:string = Math.floor(Math.random()*1e10).toString(32);\n    @observable\n    first_sighting_at: Date = new Date();\n\n    @computed\n    get displayFS(){\n        return this.first_sighting_at ? moment(this.first_sighting_at).format(\"MMM Do YYYY\") : \"No date\";\n    }\n\n}\n\n/**\n * Handles the Todo store.\n */\nexport class TodoStore {\n    @observable\n    todos: TodoObservable[] = [];\n\n    @observable\n    addingNewRow: boolean = false;\n}\n\n\nconst TodoStoreInstance = new TodoStore();\nexport {TodoStoreInstance}","import { action, computed, observable } from \"mobx\";\nimport { TodoObservable, TodoStore } from \"../../stores/TodoStore/Todo.store\";\nimport { ITodoEditForm, ITodoImportElement } from \"../../types/todo\";\nimport * as axios from 'axios'\nimport moment from \"moment\";\n\n/**\n * Handles the todo operations.\n */\nexport class TodoProvider {\n    /**\n     * The store that holds the todos.\n     */\n    store: TodoStore;\n    \n    @observable\n    editing?: TodoObservable;\n\n    @observable\n    fullView?: TodoObservable;\n    \n    constructor(store: TodoStore){\n        this.store = store;\n        this.editing = <any> null;\n        this.fullView = <any> null;\n    }\n\n    /**\n     * Creates and adds new todo.\n     * @param formData The data to be used to create the new todo.\n     */\n    @action\n    makeTodo(formData: ITodoEditForm):void{\n        formData.first_sighting_at = this.parseInputDate(formData.first_sighting_at+\"\");\n\n        let newTodo = new TodoObservable();\n        newTodo.title = formData.title;\n        newTodo.description = formData.description;\n        newTodo.finished = formData.finished;\n        newTodo.first_sighting_at = <Date> formData.first_sighting_at;\n        this.store.todos.push(newTodo);\n    }\n\n    /**\n     * Updates the todo.\n     * @param todoId The todo to edit.\n     * @param formData The form data.\n     */\n    @action\n    updateTodo(todoId:string, formData: ITodoEditForm):void{\n        const todo = this.store.todos.find(todo => todoId === todo.id);\n        \n        if(todo){\n            formData.first_sighting_at = this.parseInputDate(formData.first_sighting_at+\"\");\n            todo.title = formData.title;\n            todo.description = formData.description;\n            todo.finished = formData.finished;\n            todo.first_sighting_at = formData.first_sighting_at;\n        }else{\n            throw new Error(\"Invalid check: todo not found.\");\n        }\n    }\n\n    /**\n     *  Deletes the selected todo.\n     * @param todoId The todo ID\n     */\n    @action\n    deleteTodo(todoId:string):void{\n        this.store.todos = this.todos.filter(todo => todo.id !== todoId);\n    }\n\n    /**\n     *  Deletes the selected todos.\n     * @param todoIds The todo IDs\n     */\n    @action\n    deleteSeveralTodos(todoIds:string[]):void{\n        this.store.todos = this.todos.filter(todo => todoIds.indexOf(todo.id) < 0);\n    }\n\n    /**\n     *  Checks the selected todo.\n     * @param todoId The todo ID\n     */\n    @action\n    checkTodo(todoId: string){\n        const todo = this.store.todos.find(todo => todoId === todo.id);\n        if(todo){\n            todo.finished = !todo.finished;\n        }else{\n            throw new Error(\"Invalid check: todo not found.\");\n        }\n    }\n\n    /**\n     * Checks the selected todos.\n     * @param todoIds The todo IDs\n     */\n    @action\n    checkSeveralTodos(todoIds: string[]){\n        try{\n            const selected = this.store.todos.filter(todo => todoIds.indexOf(todo.id) > -1);\n            selected.forEach(element => {\n                element.finished = !element.finished;\n            })\n        }catch(e){\n            throw new Error(\"Error checking several todos...\");\n        }\n    }\n\n    /**\n     * Sets whether a new row is being added or not\n     * @param isAdding Whether it's adding\n     */\n    @action\n    setIsAddingNewRow(isAdding:boolean){\n        this.store.addingNewRow = isAdding;\n    }\n\n    /**\n     * Sets the editing todo.\n     * @param todoId The todo ID\n     * @param editing Whether it's editing or not the ID\n     */\n    @action\n    setEditingTodo(todoId: string, editing: boolean){\n        let todo = this.store.todos.find(element => element.id === todoId);\n        if(todo){\n            if(editing){\n                this.editing = todo;\n            }else{\n                this.editing = <any>null;\n            }\n        }else{\n            throw new Error(\"Invalid check: todo not found.\");\n        }\n    }\n\n    /**\n     * Sets the selected todo as beign edited.\n     * @param todoId The todo ID\n     * @param fullView Whether it's on full view\n     */\n    @action\n    setFullViewTodo(todoId: string, fullView:boolean){\n        let todo = this.store.todos.find(element => element.id === todoId);\n        if(todo){\n            if(fullView){\n                this.fullView = todo;\n            }else{\n                this.fullView = <any>null;\n            }\n        }else{\n            throw new Error(\"Invalid check: todo not found.\");\n        }\n    }\n\n    /**\n     * If it's currently adding a new todo\n     */\n    @computed\n    get isAddingTodo(){\n        return !!this.store.addingNewRow;\n    }\n\n    /**\n     * If it's currently editing a new todo\n     */\n    @computed\n    get isEditingTodo(){\n        //return false;\n        return !!this.editing;\n    }\n\n    /**\n     * If it's currently showing a todo on full view\n     */\n    @computed\n    get isTodoInFullView(){\n        //return false;\n        return !!this.fullView;\n    }\n\n    /**\n     * Gets the todo being edited\n     */\n    @computed\n    get editingTodo(){\n        return this.editing;\n    }\n\n\n    /**\n     * Gets the todos\n     */\n    @computed\n    get todos():TodoObservable[]{\n        return this.store.todos;\n    }\n\n    /**\n     * Loads the mock todos.\n     */\n    @action\n    async loadMockTodos(){\n        const data:ITodoImportElement[] = (await axios.default.get(\"https://api.mockaroo.com/api/01522f30?count=200&key=ea89fca0\")).data;\n        const newTodos = data.map(element => {\n            let todoObservable = new TodoObservable();\n            todoObservable.description = element.description;\n            todoObservable.finished = element.tagged;\n            todoObservable.first_sighting_at = new Date(element.first_sighting_at);\n            todoObservable.title = element.name;\n            return todoObservable;\n        })\n        this.store.todos.push(...newTodos);\n    }\n\n    /**\n     * Formats the date on a specific way to adapt to be used on an input field\n     * of type date.\n     * @param dateValue The date\n     * @returns The formatted date\n     */\n    getInputDate(dateValue: Date){\n        return moment(dateValue).format(\"YYYY-MM-DD\");\n    }\n\n    /**\n     * Parses the date from an input field to a date object.\n     * @param dateValue The input field date value\n     * @returns The date.\n     */\n    parseInputDate(dateValue: string){\n        return moment(dateValue, \"YYYY-MM-DD\").toDate();\n    }\n    \n}","import { Container, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { NotificationProvider } from '../providers/Notification/Notification.provider';\nimport { TodoProvider } from '../providers/Todo/Todo.provider';\nimport { ENotificationType } from '../types/notification';\n\n/**\n * Handles the loading for the mock data. If the data can't load, it simply\n * won't show the children elements.\n */\nexport class MockDataService extends React.Component<{TODO_PROVIDER: TodoProvider, NOTF_PROVIDER: NotificationProvider}> {\n\n    provider: TodoProvider;\n    notificationProvider: NotificationProvider;\n    state: {\n        loadedMocks: boolean,\n        error: boolean,\n        loading: boolean\n    } = {\n        loadedMocks: false,\n        error: false,\n        loading: false\n    };\n\n    constructor(props:any){\n        super(props);\n        this.provider = this.props.TODO_PROVIDER;\n        this.notificationProvider = this.props.NOTF_PROVIDER;\n    }\n\n    componentDidMount(){\n        this.setState({\n            loading: true\n        })\n        //Loads the mock todos.\n        this.provider.loadMockTodos()\n        .then(()=>{\n            this.setState({loadedMocks: true, loading: false})\n            this.notificationProvider.addNotification(\"Mock elements loaded\", \"Mock elements have been loaded correctly\", ENotificationType.INFO);\n        })\n        .catch(()=>{\n            this.setState({loadedMocks: false, loading: false, error: true});\n            this.notificationProvider.addNotification(\"Error loading mock data\", \"There was an error loading the mock element.\", ENotificationType.ERROR);\n        })\n    }\n\n    get loadingScreen(){\n        return (\n            <Container>\n                <Typography variant=\"h3\">\n                    Loading...\n                </Typography>\n            </Container>\n        )\n    }\n\n    get errorScreen(){\n        return (\n            <Container>\n                <Typography variant=\"h3\">\n                    An error ocurred.\n                </Typography>\n            </Container>\n        )\n    }\n\n\n\n    render(){\n        return !this.state.loading && this.state.loadedMocks ? <>\n            {this.props.children}\n        </> : <>\n        {\n            this.state.error ? this.errorScreen : <></>\n        }\n        {\n            this.state.loading ? this.loadingScreen : <></>\n        }\n        </>\n    }\n}","import { observable } from \"mobx\";\nimport { ENotificationType } from \"../../types/notification\";\n\n/**\n * This is the notification element.\n */\nexport class Notification {\n    @observable\n    title: string = \"\";\n\n    @observable\n    isShowing: boolean = false;\n\n    @observable\n    description: string = \"\";\n\n    @observable\n    shownAt: Date = new Date();\n\n    /**\n     * This is not meant to change once the object has been created.\n     */\n    id:string = Math.floor(Math.random()*1e10).toString(32);\n\n    /**\n     * This is not meant to change once the object has been created.\n     */\n    type: ENotificationType = ENotificationType.INFO;\n}\n\n/**\n * This is the notification store.\n */\nexport class NotificationStore {\n    @observable\n    notifications: Notification[] = [];\n}\n\n\nconst NotificationStoreInstance = new NotificationStore();\nexport {NotificationStoreInstance}","import { action, computed, observable } from \"mobx\";\nimport { NotificationStore, Notification } from \"../../stores/Notification/Notification.store\";\nimport { ENotificationType } from \"../../types/notification\";\n\n/**\n * Handles the notification functions.\n */\nexport class NotificationProvider {\n    /**\n     * The notification store.\n     */\n    store: NotificationStore;\n    \n    constructor(store: NotificationStore){\n        this.store = store;\n    }\n\n\n    /**\n     * Adds a new notification.\n     * @param title The notification title.\n     * @param description The notification description.\n     * @param type The type of notification.\n     * @param durationMillis The duration in millis.\n     */\n    @action\n    addNotification(title: string, description: string, type: ENotificationType, durationMillis:number = 3000){\n        let notification = new Notification();\n        notification.description = description;\n        notification.title = title;\n        notification.type = type;\n        notification.isShowing = true;\n        notification.shownAt = new Date();\n        this.store.notifications.push(notification);\n        setTimeout(()=>{\n            notification.isShowing = false;\n        }, durationMillis);\n    }\n\n    /**\n     * Shows a particular notification (marks it as beign shown)\n     * @param notificationID The notification to show\n     */\n    @action\n    showNotification(notificationID: string){\n        const notification = this.store.notifications.find(notification => notification.id === notificationID);\n        if(notification){\n            notification.isShowing = true;\n        }\n    }\n\n    /**\n     * Hides the specific notification (marks it as not showing)\n     * @param notificationID The notification to hide\n     */\n    @action\n    hideNotification(notificationID: string){\n        const notification = this.store.notifications.find(notification => notification.id === notificationID);\n        if(notification){\n            notification.isShowing = false;\n        }\n    }\n\n    /**\n     * Removes the selected notification\n     * @param notificationID The notification ID\n     */\n    @action\n    removeNotification(notificationID: string){\n        this.store.notifications = this.store.notifications.filter(notification => notification.id !== notificationID);\n    }\n\n    /**\n     * Shows the specific notification.\n     */\n    @computed\n    get shownNotifications(){\n        return this.store.notifications.filter(element => element.isShowing);\n    }\n\n}","import { Snackbar, SnackbarCloseReason } from '@material-ui/core';\nimport { inject, observer } from 'mobx-react';\nimport React from 'react';\nimport MuiAlert, { AlertProps, Color } from '@material-ui/lab/Alert';\nimport { NotificationProvider } from '../../../providers/Notification/Notification.provider';\nimport { ENotificationType } from '../../../types/notification';\n\n/**\n * The alert element.\n * @param props The props for this alert\n */\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\n/**\n * Handles the notification logic.\n */\n@inject(\"NOTF_PROVIDER\")\n@observer\nexport class NotificationsComponent extends React.Component<any> {\n    \n    provider: NotificationProvider;\n    constructor(props:any){\n        super(props);\n        this.provider = this.props.NOTF_PROVIDER;\n        this.handleClose = this.handleClose.bind(this);\n    }\n\n    /**\n     * Handles the closing for the notification.\n     */\n    handleClose(notificationId: string){\n        this.provider.hideNotification(notificationId);\n    }\n\n    /**\n     * Gets the severity for the notification.\n     */\n    getSeverity(notificationType: ENotificationType): any {\n        const TYPES = {\n            [ENotificationType.SUCCESS]: \"success\",\n            [ENotificationType.WARNING]: \"warning\",\n            [ENotificationType.ERROR]: \"error\",\n            [ENotificationType.INFO]: \"info\"\n        };\n        return TYPES[notificationType] || \"info\";\n    }\n\n\n    render(){\n        return (\n            <div>\n                {\n                    this.provider.shownNotifications.map(element => (\n                        <Snackbar\n                            open={element.isShowing}\n                            onClose={()=>this.handleClose(element.id)}\n                            key={element.id}\n                        >\n                            <Alert onClose={()=>this.handleClose(element.id)} severity={this.getSeverity(element.type)}>\n                                {element.description}\n                            </Alert>\n                        </Snackbar>\n                    ))\n                }\n            </div>\n        )\n    }\n    \n}","import React from 'react';\nimport { IndexPageContainer } from './index.container';\nimport { TodoStoreInstance } from '../../../stores/TodoStore/Todo.store';\nimport { Provider } from 'mobx-react';\nimport { TodoProvider } from '../../../providers/Todo/Todo.provider';\nimport { MockDataService } from '../../../rservice/MockDataService';\nimport { NotificationProvider } from '../../../providers/Notification/Notification.provider';\nimport { NotificationStoreInstance } from '../../../stores/Notification/Notification.store';\nimport { NotificationsComponent } from '../../shared/Notifications';\n\n/**\n * Main page element.\n */\nexport class IndexPage extends React.Component<{path:any}> {\n\n    todoProvider:TodoProvider;\n    notificationProvider: NotificationProvider;\n    \n    constructor(props:any){\n        super(props);\n        this.todoProvider = new TodoProvider(TodoStoreInstance);\n        this.notificationProvider = new NotificationProvider(NotificationStoreInstance);\n    }\n\n    render(){\n        return (\n            <MockDataService TODO_PROVIDER={this.todoProvider} NOTF_PROVIDER={this.notificationProvider}>\n                <NotificationsComponent NOTF_PROVIDER={this.notificationProvider}/>\n                <Provider TODO_PROVIDER={this.todoProvider} NOTF_PROVIDER={this.notificationProvider}>\n                    <IndexPageContainer />\n                </Provider>\n            </MockDataService>\n        )\n    }\n\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { IndexPage } from \"./components/pages/index\";\nimport { Router } from \"@reach/router\"\n\n\nReactDOM.render(\n  <Router>\n    <IndexPage path=\"/\"/>\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}